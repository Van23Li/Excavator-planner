function [lambda_1, lambda_2, lambda_3] = work2drive(q_1, q_2, q_3, params_c)
%%
q_2 = pi + q_2;
q_3 = pi + q_3;
lambda_1 = sqrt(params_c.l_AC^2 + params_c.l_BC^2 ...
    - 2 * params_c.l_AC * params_c.l_BC * cos(params_c.D_BCF + q_1 + params_c.D_ACx));
lambda_2 = sqrt(params_c.l_DF^2 + params_c.l_EF^2 ...
    - 2 * params_c.l_DF * params_c.l_EF ...
    * cos(2*pi - params_c.D_EFQ - q_2 - params_c.D_CFD));

l_KN = sqrt(params_c.l_NQ^2 + params_c.l_KQ^2 ...
    - 2 * params_c.l_NQ * params_c.l_KQ * cos(2 * pi - params_c.D_KQV - q_3 - params_c.D_FQN));
if q_3 <= params_c.D_KVQ + params_c.D_VKQ
    D_QNM = -asin(params_c.l_KQ / l_KN * sin(2* pi - params_c.D_KQV - q_3 - params_c.D_FQN))...
        + acos((params_c.l_MN^2 + l_KN^2 - params_c.l_MK^2)...
        /(2 * params_c.l_MN * l_KN));
elseif q_3 > params_c.D_KVQ + params_c.D_VKQ
    D_QNM = asin(params_c.l_KQ / l_KN * sin(2* pi - params_c.D_KQV - q_3 - params_c.D_FQN))...
        + acos((params_c.l_MN^2 + l_KN^2 - params_c.l_MK^2)...
        /(2 * params_c.l_MN * l_KN));
end
lambda_3 = sqrt(params_c.l_GN^2 + params_c.l_MN^2 ...
    - 2 * params_c.l_GN * params_c.l_MN ...
    * cos(2 * pi - D_QNM - params_c.D_FNQ - params_c.D_FNG));
end